local ndk       = premake.modules.ndk

-- Manifest goes in project dirctory
function ndk.getManifestFilename(this, cfg)
	return path.join(ndk.getProjectPath(this, cfg), ndk.MANIFEST)
end

-- Source path for Java files. They need to be under a directory tree based on the package name.
function ndk.getAssetPath(this, cfg)
	-- Asset files live in assets under the build directory
	return path.join(ndk.getProjectPath(this, cfg), 'assets')
end

-- Source path for Java files. They need to be under a directory tree based on the package name.
function ndk.getJavaPath(this, cfg, packagename)
	-- Java files live in src under the build directory
	local p = path.join(ndk.getProjectPath(this, cfg), 'src')
	if packagename then
		local forward = string.explode(packagename, '%.')
		local reverse = {}
		for _,v in ipairs(forward) do
			table.insert(reverse, 1, v)
		end
		p = path.join(p, table.concat(forward, '/'))
	end
	return p
end

-- Make name of Java file relative to the Java source path
function ndk.getActivityFilename(this, cfg)
	local filename = cfg.activity..ndk.JAVA
	return path.join(ndk.getJavaPath(this, cfg, cfg.packagename), filename)
end

-- Determine which version of OpenGL, if any, to link against.
function ndk.getGlesVersion(cfg)
	local links = config.getlinks(cfg, 'system', 'basename')

	-- Specify highest version we linked against
	if table.contains(links, ndk.GLES30) then
		return 0x00030000
	elseif table.contains(links, ndk.GLES20) then
		return 0x00020000
	elseif table.contains(links, ndk.GLES10) then
		return 0x00010000
	end
end

-- Generate manifest file. This describes the application to ant, the Android OS, and the Google Play store.
function ndk.generateManifest(prj, cfg)
	_p('<?xml version="1.0" encoding="utf-8"?>')
	_p('<!-- Android application manifest autogenerated by Premake -->')
	_x(0, '<manifest xmlns:android="http://schemas.android.com/apk/res/android"')
		_x(1, 'package="%s"', prj.packagename or 'com.example.app')
		_x(1, 'android:versionCode="%d" >', cfg.packageversion or 0)
		--_x(1, 'android:versionString="%d">', cfg.packageversion or 0)

		-- Application tag
		_x(1, '<application android:debuggable="%s"', tostring(cfg.flags.Symbols ~= nil))
			_x(2, 'android:theme="@android:style/Theme.NoTitleBar.Fullscreen">')

			-- Contains activity
			_x(2, '<activity android:name="%s.%s"', prj.packagename or 'com.example.app', cfg.activity or 'Activity')
				_x(3,'android:screenOrientation="landscape">')

				-- Launcher intent
				_x(3, '<intent-filter>')
					_p(4, '<action android:name="android.intent.action.MAIN" />')
					_p(4, '<category android:name="android.intent.category.LAUNCHER" />')
				_p(3, '</intent-filter>')
			
			_p(2, '</activity>')
		
		_x(1, '</application>')

	-- SDK version
	if cfg.framework then
		_x(1, '<uses-sdk android:minSdkVersion="%d" />', ndk.getApiLevel(cfg))
	end

	-- Features
	local gles_version = ndk.getGlesVersion(cfg)
	if gles_version then
		_x(1, '<uses-feature android:glEsVersion="0x%08x" />', gles_version)
	end

	-- Permissions
	for _,v in ipairs(cfg.permissions) do
	    _x(1, '<uses-permission android:name="android.permission.%s" />', v)
	end
	 
	_p('</manifest>')
end

-- Generate Java source file for the app package. This is a bit of a hack, and involves copying a Java file from 
-- the project and patching it to contain the correct package path.
function ndk.generateActivity(prj, cfg)
	_p('// Java activity wrapper generated by Premake')
	_p('package %s;', cfg.packagename)
	_p('import %s.%s;', cfg.basepackagename, cfg.baseactivity)
	_p('public class %s extends %s {}', cfg.activity, cfg.baseactivity)
end

